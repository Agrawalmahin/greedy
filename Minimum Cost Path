Given a square grid of size N, each cell of which contains integer cost which represents a cost to traverse through that cell, we need to find a path from top left cell to bottom right cell by which the total cost incurred is minimum.
From the cell (i,j) we can go (i,j-1), (i, j+1), (i-1, j), (i+1, j). 

Note: It is assumed that negative cost cycles do not exist in the input matrix.


 // } Driver Code Ends


class Solution
{
    public:
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
    int minimumCostPath(vector<vector<int>>& grid) 
    {
        int n = grid.size();
       int dist[1001][1001];
    for(int i=0;i<1001;i++)
        for(int j=0;j<1001;j++)
            dist[i][j] = INT_MAX;
    dist[0][0] = grid[0][0];
    
    priority_queue<pair<int, pair<int,int>>, vector<pair<int, pair<int,int>>>, greater<pair<int, pair<int,int>>>> pq;
    
    pq.push(make_pair(grid[0][0], make_pair(0,0)));
    
    while(!pq.empty()){
        int dx[] = {-1,1,0,0};
        int dy[] = {0,0,-1,1};
        
        pair<int, pair<int,int>> p = pq.top();
        pq.pop();
        
        int i = p.second.first;
        int j = p.second.second;
        
        for(int k=0;k<4;k++){
            int x = i + dx[k];
            int y = j + dy[k];
            
            if(x>=0 && x<n && y>=0 && y<n && (dist[i][j]+grid[x][y]) < dist[x][y]){
                dist[x][y] = (dist[i][j]+grid[x][y]);
                pq.push(make_pair(dist[x][y], make_pair(x,y)));
            }
        }
    }
    //return grid[0][0];
    return dist[n-1][n-1];
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>grid(n, vector<int>(n, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.minimumCostPath(grid);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends
